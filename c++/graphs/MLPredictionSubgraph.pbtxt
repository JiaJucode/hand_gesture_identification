type: "MLPredictionSubgraph"
input_stream: "input_vec"
input_side_packet: "port_num"
output_stream: "result"

node {
  calculator: "InitServerCalculator"
  input_side_packet: "PORT:port_num"
  output_side_packet: "SOCKET:send_sock"
  output_side_packet: "START:init_delay"
}

node {
  calculator: "SendDataOverSocketCalculator"
  input_stream: "READY:delayed_send"
  input_stream: "DATA0:input_vec"
  input_side_packet: "SOCKET:send_sock"
  output_stream: "COMPLETE:receive"
  input_stream_info: {
    tag_index: "READY"
    back_edge: true
  }
  input_stream_handler {
    input_stream_handler: 'EarlyCloseInputStreamHandler'
  }
  options : {
    [mediapipe.SocketDataCalculatorOptions.ext]{
      data: VEC_FLOAT_TYPE,
    }
  }
}

node {
  calculator: "ReceiveDataOverSocketCalculator"
  input_stream: "READY:receive"
  input_side_packet: "SOCKET:send_sock"
  output_stream: "COMPLETE:send"
  output_stream: "DATA0:result"
  options : {
    [mediapipe.SocketDataCalculatorOptions.ext]{
      data: VEC_FLOAT_TYPE,
    }
  }
}

node {
  calculator: "PacketTimeDelayCalculator"
  input_stream: "send"
  input_side_packet: "init_delay"
  output_stream: "delayed_send"
}


#SELECT_TF_OPS not supported by mediapipe inference calculator

#node {
#  calculator: "VectorFloatToMediapipeTensorCalculator"
#  input_stream: "input_vec"
#  output_stream: "input_tensor"
#}

#node {
#  calculator: "ConstantSidePacketCalculator"
#  output_side_packet: "PACKET:model_path"
#  options: {
#    [mediapipe.ConstantSidePacketCalculatorOptions.ext]: {
#      packet { string_value : "mediapipe/examples/subgraph_testing/tfLite_models/thumb_gesture2.tflite"}
#    }
#  }
#}

#node {
#  calculator: "LocalFileContentsCalculator"
#  input_side_packet: "FILE_PATH:model_path"
#  output_side_packet: "CONTENTS:model_blob"
#  options: {
#    [mediapipe.LocalFileContentsCalculatorOptions.ext]: {
#      text_mode: false
#    }
#  }
#}

#node {
#  calculator: "TfLiteModelCalculator"
#  input_side_packet: "MODEL_BLOB:model_blob"
#  output_side_packet: "MODEL:model"
#}

#node {
#  calculator: "InferenceCalculator"
#  input_side_packet: "MODEL:model"
#  input_stream: "TENSORS:input_tensor"
#  output_stream: "TENSORS:result_tensor"
#  options: {
#    [mediapipe.InferenceCalculatorOptions.ext] {
#      delegate: { tflite {} }
#    }
#  }
#}

#node {
#  calculator: "MediapipeTensorToVectorFloatCalculator"
#	input_stream: "prediction"
#	output_stream: "result_vectors"
#}